// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const getAvailablePorts = `-- name: GetAvailablePorts :many
SELECT id, port, created_at, server_id FROM ports WHERE server_id IS NULL ORDER BY port ASC
`

func (q *Queries) GetAvailablePorts(ctx context.Context) ([]Port, error) {
	rows, err := q.db.QueryContext(ctx, getAvailablePorts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Port
	for rows.Next() {
		var i Port
		if err := rows.Scan(
			&i.ID,
			&i.Port,
			&i.CreatedAt,
			&i.ServerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPorts = `-- name: GetPorts :many
SELECT id, port, created_at, server_id FROM ports ORDER BY port ASC
`

func (q *Queries) GetPorts(ctx context.Context) ([]Port, error) {
	rows, err := q.db.QueryContext(ctx, getPorts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Port
	for rows.Next() {
		var i Port
		if err := rows.Scan(
			&i.ID,
			&i.Port,
			&i.CreatedAt,
			&i.ServerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPort = `-- name: InsertPort :exec
INSERT INTO ports(port) VALUES(?)
`

func (q *Queries) InsertPort(ctx context.Context, port int64) error {
	_, err := q.db.ExecContext(ctx, insertPort, port)
	return err
}

const insertServer = `-- name: InsertServer :one
INSERT INTO servers(max_players, start_map) VALUES(?, ?) RETURNING id, max_players, start_map, created_at
`

type InsertServerParams struct {
	MaxPlayers sql.NullInt64
	StartMap   sql.NullString
}

func (q *Queries) InsertServer(ctx context.Context, arg InsertServerParams) (Server, error) {
	row := q.db.QueryRowContext(ctx, insertServer, arg.MaxPlayers, arg.StartMap)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.MaxPlayers,
		&i.StartMap,
		&i.CreatedAt,
	)
	return i, err
}

const updatePort = `-- name: UpdatePort :exec
UPDATE ports SET server_id=? WHERE id=?
`

type UpdatePortParams struct {
	ServerID sql.NullInt64
	ID       int64
}

func (q *Queries) UpdatePort(ctx context.Context, arg UpdatePortParams) error {
	_, err := q.db.ExecContext(ctx, updatePort, arg.ServerID, arg.ID)
	return err
}
